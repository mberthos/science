apiVersion: flagger.app/v1beta1
kind: Canary
metadata:
  name: helloworld
  namespace: flagger
spec:
  # deployment reference
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: helloworld
  # the maximum time in seconds for the canary deployment
  # to make progress before it is rollback (default 600s)
  progressDeadlineSeconds: 60
  # HPA reference (optional)
  autoscalerRef:
    apiVersion: autoscaling/v2beta2
    kind: HorizontalPodAutoscaler
    name: helloworld
  service:
    # service port number
    port: 8080
    # container port number or name (optional)
    targetPort: 8080
    # Istio gateways (optional)
    gateways:
      - public-gateway
    # Istio virtual service host names (optional)
    hosts:
      - "helloworld-istio.petlove.com.br"
    # Istio traffic policy (optional)
    trafficPolicy:
      tls:
        # use ISTIO_MUTUAL when mTLS is enabled
        mode: DISABLE
    # Istio retry policy (optional)
    retries:
      attempts: 3
      perTryTimeout: 1s
      retryOn: "gateway-error,connect-failure,refused-stream"
  analysis:
    # schedule interval (default 60s)
    interval: 30s
    # max number of failed metric checks before rollback
    threshold: 3
    ########
    #* FOR Canary (progressive traffic shifting)
    # max traffic percentage routed to canary
    # percentage (0-100)
    ##maxWeight: 50
    # canary increment step
    # percentage (0-100)
    ##stepWeight: 10
    #####
    #* FOR Blue/Green (traffic switching and mirroring)You can enable mirroring by replacing stepWeight/maxWeight with iterations and by setting analysis.mirror to true:
    # total number of iterations
    iterations: 5
    # enable traffic shadowing
    mirror: true
    # weight of the traffic mirrored to your canary (defaults to 100%)
    mirrorWeight: 100

    metrics:
      - name: request-success-rate
        # minimum req success rate (non 5xx responses)
        # percentage (0-100)
        thresholdRange:
          min: 99
        interval: 30s
      - name: request-duration
        # maximum req duration P99
        # milliseconds
        thresholdRange:
          max: 500
        interval: 30s

    # testing (optional)
    webhooks:
      - name: acceptance-test
        type: pre-rollout
        url: http://flagger-loadtester.flagger/
        timeout: 30s
        metadata:
          type: bash
          cmd: "ls"
      - name: load-test
        url: http://flagger-loadtester.flagger/
        timeout: 5s
        metadata:
          cmd: "hey -z 1m -q 10 -c 2 http://helloworld-canary.flagger:8080/"